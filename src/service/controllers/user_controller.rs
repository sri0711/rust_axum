use crate::service::app::{responder::ApiResponse, connection::sample_database};
use crate::service::models::user_model::User;
use mongodb::{Collection, bson::Document};
use serde_json::json;
use futures_util::TryStreamExt;
use mongodb::bson::from_document;

pub async fn user_list() -> ApiResponse<String> {
    // Initialize the MongoDB client and retrieve the database
    let sample_database = match sample_database().await {
        Ok(db) => db,
        Err(err) => return ApiResponse {
            success: false,
            message: format!("Failed to connect to the database: {}", err),
            data: None,
            status: Some(500),
        },
    };

    let collection: Collection<User> = sample_database.collection("users");

    // Fetch the users from the database
    let users_result = match collection.find(Document::new()).await {
        Ok(cursor) => cursor,
        Err(err) => return ApiResponse {
            success: false,
            message: format!("Failed to retrieve users: {}", err),
            data: None,
            status: Some(500),
        },
    };

    let mut users = Vec::new();

    // Iterate over the cursor
    let mut cursor = users_result;
    while let Some(user_result) = cursor.try_next().await.unwrap() {
        match user_result {
            Ok(user_doc) => {
                // Convert Document to User
                match from_document::<User>(user_doc) {
                    Ok(user) => users.push(user),
                    Err(err) => {
                        eprintln!("Error converting document to User: {}", err);
                    }
                }
            }
            Err(err) => {
                eprintln!("Error reading user data: {}", err);
                return ApiResponse {
                    success: false,
                    message: "Error reading user data".to_string(),
                    data: None,
                    status: Some(500),
                };
            }
        }
    }

    // Return the list of users in the response
    ApiResponse {
        success: true,
        message: "List of users".to_string(),
        data: Some(json!(users).to_string()),
        status: Some(200),
    }
}
pub async fn create_user() -> ApiResponse<String> {
   let sample_database = sample_database().await.unwrap();
    let users_collections = sample_database.collection("users");

    // Create a new user
    let new_user = User {
        id: None, // Assuming the ID will be generated by MongoDB
        name: "Sathish".to_string(),
        age: 28,
        phone: "7904739162".to_string(),
        email: Some("sathish@gmail.com".to_string()),
    };

    // Insert the user into the database
    match users_collections.insert_one(new_user).await {
        Ok(_) => ApiResponse {
            success: true,
            message: "User created successfully".to_string(),
            data: None,
            status: Some(201),
        },
        Err(_) => ApiResponse {
            success: false,
            message: "Failed to create user".to_string(),
            data: None,
            status: Some(500),
        },
    }
}
